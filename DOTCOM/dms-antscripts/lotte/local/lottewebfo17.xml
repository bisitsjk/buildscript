<?xml version="1.0" encoding="UTF-8"?>
<project name="lottewebfo">
	<import file="./lotteweb.xml"/>
    <!-- **************************************************************** -->
	<!-- PROPERTY -->
	<!-- **************************************************************** -->	
	<property name="deploy.id.prefix" value="FO"/>
	<property name="init.cmd"     value="foinit"/>
	<property name="copy.cmd"     value="fodeploy"/>
	<property name="backup.cmd"   value="fobackup"/>
	<property name="rollback.cmd" value="forollback"/>

	
	<!-- **************************************************************** -->
	<!-- CHECK -->
	<!-- **************************************************************** -->	
	<target name="check_common">
		<echo>♠ 공통 배포ID가 있는지 확인합니다. : ${comm.deploy.id}</echo>
		<substring property="deploy.id.suffix" string="${deploy.id}" start="2" end="16"/>
		<condition property="existCommon">
			<and>
				<contains string="${comm.deploy.id}" substring="CM_" casesensitive="true" />
				<length   string="${comm.deploy.id}" when="greater" length="15"/>
				<contains string="${comm.deploy.id}" substring="${deploy.id.suffix}"/>
			</and>
		</condition>
	</target>
	
	<target name="check_wnsearch">
		<condition property="existwnsearch">
			<resourceexists>
				<file file="${hdsnWrkSpPath}/${svnReposNm}/${hdsnPackPath}/${deploy.id}/fo/APP-INF/conf/wnsearch.${WNsearch}.properties"/>
			</resourceexists>
		</condition>
	</target>
			
	<target name="check_exist">
		<condition property="isExistWebapp">
			<resourceexists>
				<file file="${hdsnWrkSpPath}/${svnReposNm}/${hdsnPackPath}/${deploy.id}/fo/webapp"/>
			</resourceexists>
		</condition>
		<condition property="isExistAppinf">
			<resourceexists>
				<file file="${hdsnWrkSpPath}/${svnReposNm}/${hdsnPackPath}/${deploy.id}/fo/APP-INF"/>
			</resourceexists>
		</condition>
		<condition property="isExistCommon">
			<resourceexists>
				<file file="${hdsnWrkSpPath}/${svnReposNm}/${hdsnPackPath}/${deploy.id}/common/conf"/>
			</resourceexists>
		</condition>
		<condition property="isJspAndClass">
			<and>
				<istrue value="${isExistWebapp}"/>
				<istrue value="${isExistAppinf}"/>
			</and>
		</condition>
		<condition property="isJsp">
			<and>
				<istrue value="${isExistWebapp}"/>
				<isfalse value="${isExistAppinf}"/>
			</and>
		</condition>
		<condition property="isClass">
			<and>
				<isfalse value="${isExistWebapp}"/>
				<istrue value="${isExistAppinf}"/>
			</and>
		</condition>
		<condition property="isComm">
			<and>
				<isfalse value="${isExistWebapp}"/>
				<isfalse value="${isExistAppinf}"/>
				<istrue value="${isExistCommon}"/>
			</and>
		</condition>
		<condition property="isWeb">
			<resourceexists>
				<file file="${hdsnWrkSpPath}/${svnReposNm}/${hdsnPackPath}/${deploy.id}/fo/webroot"/>
			</resourceexists>
		</condition>
		<condition property="isWas">
			<or>
				<istrue value="${isExistWebapp}"/>
				<istrue value="${isExistAppinf}"/>
				<istrue value="${isExistCommon}"/>
			</or>
		</condition>
		<condition property="isExist">
			<or>
				<istrue value="${isWeb}"/>
				<istrue value="${isWas}"/>
			</or>
		</condition>
	</target>	
	
	<target name="check_host">
		<condition property="isEcfowstst"> <!-- 사용하는 곳 없음 -->
			<equals arg1="10.149.193.44" arg2="${host.ip}"/>
		</condition>
		<condition property="isHercules1">
			<equals arg1="10.149.144.65" arg2="${host.ip}"/>
		</condition>
	</target>	
	
	<target name="check_alive" depends="check_host">
		<echo>check alive ${host.ip}</echo>
		<waitfor maxwait="120000" checkevery="10000" timeoutproperty="isTimeout">
			<socket server="${host.ip}" port="8081"/> <!-- fo -->
		</waitfor>
	</target>
	
	
<!-- **************************************************************** -->
<!-- MAIN -->
<!-- **************************************************************** -->
	<target name="phase2.1">
		<echo>================================================================================</echo>
		<antcall target="accept"/>
		<antcall target="merge"/>
		<antcall target="clean"/>
		<antcall target="build"/>
		<antcall target="pack"/>
		<echo>================================================================================</echo>
	</target>
	
	<target name="phase2.1a">
		<property name="deploy.id" value="${main.deploy.id}"/>
		<antcall target="manual_accept"/>
	</target>
	
	<target name="phase2.2">
		<echo>================================================================================</echo>
		<echo>${MESSAGES}</echo>
		<property name="deploy.id" value="${main.deploy.id}"/>
		<property name="user.id"   value="jeus"/>
		<propertyvalue property="user.pwd" value="${user.id}"/>
		<antcall target="deploy_web"/>
		<echo>================================================================================</echo>
	</target>
	
	<target name="phase2.3">
		<echo>================================================================================</echo>
		<property name="deploy.id" value="${main.deploy.id}"/>
		<property name="user.id"   value="jeus"/>
		<propertyvalue property="user.pwd" value="${user.id}"/>
		<antcall target="deploy_tomcat"/>
		<echo>================================================================================</echo>
	</target>
	
	<target name="phase2.4">
		<echo>================================================================================</echo>
		<property name="deploy.id" value="${main.deploy.id}"/>
		<antcall target="notice_success"/>
		<antcall target="record"/>
		<echo>================================================================================</echo>
	</target>
	
	<target name="phase3.1">
		<echo>================================================================================</echo>
		<antcall target="accept_real"/>
		<antcall target="merge"/>
		<antcall target="clean"/>
		<antcall target="build"/>
		<antcall target="pack"/>
		<echo>================================================================================</echo>
	</target>	
	
	<target name="phase3.2">
		<echo>================================================================================</echo>
		<property name="deploy.id" value="${main.deploy.id}"/>
		<property name="user.id"   value="jeus"/>
		<propertyvalue property="user.pwd" value="${user.id}"/>
		<antcall target="deploy"/>
		<echo>================================================================================</echo>
	</target>
	
	<target name="phase3.3">
		<echo>================================================================================</echo>
		<property name="deploy.id" value="${main.deploy.id}"/>
		<antcall target="record"/>
		<echo>================================================================================</echo>
	</target>

	
		
	<!-- **************************************************************** -->
	<!-- BUILD -->
	<!-- build -->
	<!-- javac 전에 <record name="${log.path}/${deploy.id}_BUILD.log" action="start"/> 구문 삽입         -->
	<!-- javac 안에 failonerror="false" errorProperty="isBuildError" 구문 삽입 -->
	<!-- javac 후에 <record name="${log.path}/${deploy.id}_BUILD.log" action="stop"/> 구문 삽입           -->
	<!-- fail task 앞에 <antcall target="notice_fail"/> 구문 삽입 -->
	<!-- 마지막에 <fail if="${isBuildError}" message="컴파일 오류가 발생했습니다." /> 구문 삽입 -->
	<!-- errorProerty 이름과 fail task의 if attribute에 사용되는 property 이름은 동일해야 함 -->
	<!-- **************************************************************** -->
	<target name="clean">
	    <mkdir dir="${hdsnWrkSpPath}/${svnReposNm}/${hdsnBranchPath}/${srcClassesPath}" />
		
		<delete includeemptydirs="true">
			<fileset dir="${hdsnWrkSpPath}/${svnReposNm}/${hdsnBranchPath}/${srcClassesPath}" includes="**/*"/>
    	</delete>
	</target>
	
	<target name="build" depends="set_id">
		<path id="classpath">
			<fileset dir="${java17.home.dir}/jre/lib">
				<include name="rt.jar" />
			</fileset>
			<fileset dir="${comm.wrksp.path}/${comm.svn.repos.name}/${hdsnBranchPath}/${comm.ref.path}">
				<include name="*.jar" />
			</fileset>
			<fileset dir="${comm.wrksp.path}/${comm.svn.repos.name}/${hdsnBranchPath}/${comm.lib.path}">
				<include name="*.jar" />
				<exclude name="commons-pionnet.jar" />
				<exclude name="commons-interfaces.jar" />
				<exclude name="commons-pricemgr.jar" />
			</fileset>
			<fileset dir="${comm.wrksp.path}/${comm.svn.repos.name}/${hdsnBranchPath}/${comm.pdk.path}">
				<include name="*.jar" />
			</fileset>
			<fileset dir="${comm.wrksp.path}/${comm.svn.repos.name}/${hdsnBranchPath}/${comm.ifc.path}">
				<include name="*.jar" />
			</fileset>
			<fileset dir="${comm.wrksp.path}/${comm.svn.repos.name}/${hdsnBranchPath}/${comm.prm.path}">
				<include name="*.jar" />
			</fileset>			
			<fileset dir="${hdsnWrkSpPath}/${svnReposNm}/${hdsnBranchPath}/${srcLibPath}">
				<include name="*.jar" />
				<exclude name="commons-pionnet.jar" />
				<exclude name="commons-interfaces.jar" />
				<exclude name="commons-pricemgr.jar" />
			</fileset>
		</path>
		<record name="${log.path}/${deploy.id}_BUILD.log" action="start"/>
		<javac  
			srcdir="${hdsnWrkSpPath}/${svnReposNm}/${hdsnBranchPath}/${srcJavaPath}"
			classpathref="classpath"
			destdir="${hdsnWrkSpPath}/${svnReposNm}/${hdsnBranchPath}/${srcClassesPath}"
			failonerror="false" errorProperty="isBuildError"
			debug="on"
			encoding="utf-8"
			compiler="modern"
			fork="true"
			nowarn="on"
			source="1.7"
			target="1.7"
			memoryMaximumSize="256m" />		
		<record name="${log.path}/${deploy.id}_BUILD.log" action="stop"/>
		<antcall target="notice_fail"/>
		<fail if="${isBuildError}" message="컴파일 오류가 발생했습니다." />
		<copy todir="${hdsnWrkSpPath}/${svnReposNm}/${hdsnBranchPath}/${srcClassesPath}">
			<fileset dir="${hdsnWrkSpPath}/${svnReposNm}/${hdsnBranchPath}/${srcJavaPath}">
				<include name="**/**/*.xml"/>
		    </fileset>
		</copy>		
	</target>			
	
	
	<!-- **************************************************************** -->
	<!-- PACK -->
	<!-- **************************************************************** -->
	<target name="pack.jar" depends="check_common" if="${existCommon}">
		<waitfor maxwait="5000" checkevery="1000" timeoutproperty="isTimeout">
			<resourcecount when="greater" count="0">
				<fileset dir="${comm.wrksp.path}/${comm.svn.repos.name}/${hdsnPackPath}/${comm.deploy.id}">
					<include name="${svrLibPath}/*.*"/>
					<include name="common/conf/**/*"/>
			    </fileset>
			</resourcecount>
		</waitfor>
		<echo>Timeout : ${isTimeout}</echo>
		<copy todir="${hdsnWrkSpPath}/${svnReposNm}/${hdsnPackPath}/${deploy.id}">
			<fileset dir="${comm.wrksp.path}/${comm.svn.repos.name}/${hdsnPackPath}/${comm.deploy.id}">
				<include name="${svrLibPath}/*.*"/>
				<include name="common/conf/**/*"/>
		    </fileset>
		</copy>
	</target>
	
	
	<!-- **************************************************************** -->
	<!-- BACKUP -->
	<!-- **************************************************************** -->
	

	<!-- **************************************************************** -->
	<!-- SEND  -->
	<!-- **************************************************************** -->	
	<target name="send_web">
		<scp todir="${user.id}:${user.pwd}@${host.ip}:${stopover.dir}/${deploy.id}" trust="true">
			<fileset dir="${hdsnWrkSpPath}/${svnReposNm}/${hdsnPackPath}/${deploy.id}">
				<include name="fo/webroot/**/*"></include>
				<exclude name="**/.svn/**"></exclude>
			</fileset>
		</scp>
	</target>
						
	<target name="send_was">
		<scp todir="${user.id}:${user.pwd}@${host.ip}:${stopover.dir}/${deploy.id}" trust="true">
			<fileset dir="${hdsnWrkSpPath}/${svnReposNm}/${hdsnPackPath}/${deploy.id}">
				<include name="common/conf/**/*"></include>
				<include name="fo/APP-INF/**/*"></include>
				<include name="fo/webapp/**/*"></include>
				<exclude name="**/.svn/**"></exclude>
			</fileset>
		</scp>
	</target>	
	
	<target name="send" depends="check_host" if="${isHercules1}">
		<scp todir="${user.id}:${user.pwd}@${host.ip}:${stopover.dir}/${deploy.id}" trust="true">
			<fileset dir="${hdsnWrkSpPath}/${svnReposNm}/${hdsnPackPath}/${deploy.id}">
				<include name="common/conf/**/*"></include>
				<include name="fo/APP-INF/**/*"></include>
				<include name="fo/webapp/**/*"></include>
				<include name="fo/webroot/**/*"></include>
				<exclude name="**/.svn/**"></exclude>
			</fileset>
		</scp>
	</target>	
	
	<target name="wnsearch_properties" depends="check_wnsearch" if="${existwnsearch}">
		<sshexec host="${host.ip}" username="${user.id}" password="${user.pwd}" 
			trust="true" verbose="false" command="cp /usr1/home/jeus/deploy/src/${deploy.id}/fo/APP-INF/conf/wnsearch.${WNsearch}.properties /usr1/home/jeus/deploy/src/${deploy.id}/fo/APP-INF/conf/wnsearch.properties" />
		<echo>wnsearch.properties : wnsearch.${WNserver}.properties</echo>
	</target>

	<!-- **************************************************************** -->
	<!-- DEPLOY -->
	<!-- **************************************************************** -->	
	
		
	<!-- **************************************************************** -->
	<!-- ROLLBACK -->
	<!-- **************************************************************** -->

</project>