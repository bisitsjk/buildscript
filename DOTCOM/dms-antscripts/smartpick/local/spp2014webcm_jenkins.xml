<?xml version="1.0" encoding="UTF-8"?>
<project name="spp2014webcm_jenkins">
    <!-- **************************************************************** -->
	<!-- PROPERTY -->
	<!-- **************************************************************** -->
	<echo>PROPERTY FILE : ${ant.project.name}.${DEPLOY_PHASE}.properties</echo>
	<!-- system path -->
	<property name="java.home.dir"     value="C:/Program Files (x86)/Java/jdk1.6.0_25" />
	<property name="jeus.home.dir"     value="C:/TmaxSoft/JEUS6.0" />
	<property name="hudson.home.dir"   value="E:/jenkins-smartpick" />
	<property name="deployer.home.dir" value="D:/deployer" />
	<!-- parameters -->
	<property name="main.deploy.id"    value="${DEPLOY_ID}"/>
	<property name="comm.deploy.id"    value="${COMM_DEPLOY_ID}"/>
	<property name="deploy.phase"      value="${DEPLOY_PHASE}"/>
	<!-- properties -->
	<property file="./${ant.project.name}.${deploy.phase}.properties"/>
	<!-- 시험배포 자동화 용 -->
	<tstamp><format property="deploy.date" pattern="yyyyMMdd"/></tstamp>
	<property name="rglr.dep.id" value="CM_${deploy.date}_${rglrDepHhmm}"/>	
	<!-- 첫 접수시 0건이면, 다음 접수시 지각한 건 접수하지 않도록 하기위함 -->
	<!-- E:/jenkins-smartpick/jobs/SPP2014WEB_CM_1_LOCK/workspace -->
	<property name="lock.workspace" value="${hdsnLockWrkSpPath}" />
	
	<!-- **************************************************************** -->
	<!-- MAIN TARGET -->
	<!-- **************************************************************** -->	
	<target name="run" depends="set_params">
		<echo>♠ BUILD ${deploy.id}</echo>
		<antcall target="update" />
		<antcall target="merge" />
		<antcall target="build" />
		<antcall target="pack" />
	</target>
		
	<target name="run_bo" depends="set_params">
		<echo>♠ SPP BO DEPLOY ${deploy.id}</echo>
		<antcall target="backup" />
		<antcall target="deploy_bo" />
	</target>	
	
	<!-- **************************************************************** -->
	<!-- CHECK -->
	<!-- **************************************************************** -->
	<target name="set_params">
		<echo>♠ 배포ID를 세팅합니다.</echo>
		<!-- 무조건 CM 이어야함 -->
		<condition property="deploy.id" value="${main.deploy.id}">
			<and>
				<contains string="${main.deploy.id}" substring="CM_" casesensitive="true" />
				<length string="${main.deploy.id}" when="greater" length="15"/>
			</and>
		</condition>
		<condition property="deploy.id" value="${comm.deploy.id}">
			<and>
				<contains string="${comm.deploy.id}" substring="CM_" casesensitive="true" />
				<length string="${comm.deploy.id}" when="greater" length="15"/>
			</and>
		</condition>
		<condition property="isValid"><!-- CM 이 맞는지 확인 -->
			<and>
				<contains string="${deploy.id}" substring="CM_" casesensitive="true" />
				<length string="${deploy.id}" when="greater" length="15"/>
			</and>
		</condition>
		<echo>DEPLOY_ID : ${deploy.id} / ${isValid}</echo>
	</target>
	
	
	<!-- existCmmLib 인데 existLibJar 를 잘 못 호출하는건가? -->
	<target name="check_jar"><!-- 수정 필요 -->
		<echo>♠ common jar가 있는지 확인합니다.</echo>
		<condition property="existCmmLib">
			<!-- 배포되어야할 라이브러리(jar) 있는지 확인 , jar 파일을 올렸다면 체크아웃 받을때 있겠지.  -->
			<resourcecount when="greater" count="0">
				<!-- E:/jenkins-smartpick/jobs/SPP2014WEB_CM_1_TEST_BUILD/workspace/pack/REAL/CM_20160503_1400 -->
				<fileset dir="${hdsnWrkSpPath}/${svnReposNm}/${hdsnPackPath}/${deploy.id}">
					<include name="spp-web-cm/spp-web-common-lib/LIB-INF/common-lib/*.jar" />
				</fileset>
			</resourcecount>
		</condition>
		<condition property="existCmmJar">
			<!-- jar로 묶을 배포파일이 있는지 확인 : Pack 할때 java 배포소스가 있다면 class 파일들이 복사되어 있겠지. -->
			<resourcecount when="greater" count="0">
				<!-- E:/jenkins-smartpick/jobs/SPP2014WEB_CM_1_TEST_BUILD/workspace/pack/REAL/CM_20160503_1400 -->
				<fileset dir="${hdsnWrkSpPath}/${svnReposNm}/${hdsnPackPath}/${deploy.id}">
					<include name="spp_bo/webapp/WEB-INF/classes/**/*" />
				</fileset>
			</resourcecount>		
		</condition>
		<condition property="existJar">
			<or>
				<matches string="${existCmmLib}" pattern="true" />
				<matches string="${existCmmJar}" pattern="true" />
			</or>
		</condition>
		
		<echo>common-lib             : ${existCmmLib}</echo><!-- 라이브러리 파일들 체크 -->
		<echo>spp-web-common-lib.jar : ${existCmmJar}<!-- class 파일들 체크 --></echo>
	</target>
	
	<target name="check_lock_prop">
		<condition property="existLockProp">
			<resourceexists>
				<file file="${lock.workspace}/${rglr.dep.id}_lock.properties"/>
			</resourceexists>
		</condition>
		<echo>${rglr.dep.id}_lock.properties / ${existLockProp}</echo>
	</target>
	
	<!-- **************************************************************** -->	
	<!-- UPDATE -->
	<!-- **************************************************************** -->
	<target name="update" if="isValid">
		<echo>♠ trunk, branches를 update합니다.</echo>
		<java jvm="${java.home.dir}/bin/java" fork="true"
		      failonerror="true"
		      jar="${deployer.home.dir}/bin/deploy-deployer.jar">
			<arg value="${ant.project.name}"/>
			<arg value="${deploy.id}"/>
			<arg value="${deploy.phase}"/>
			<arg value="update"/>
		</java>
	</target>

	<!-- **************************************************************** -->
	<!-- LOCK, 접수 : 정기배포, 자동접수 시에만 사용 -->
	<!-- **************************************************************** -->
	<target name="set_prop" unless="existLockProp">
		<propertyfile file="${lock.workspace}/${rglr.dep.id}_lock.properties">
			<entry key="deploy_count" type="int" value="0" />
			<entry key="first_error" value="false" />
		</propertyfile>
	</target>
		
	<target name="exec_app">
		<property file="${lock.workspace}/${rglr.dep.id}_lock.properties" />
		
		<condition property="isStop">
			<equals arg1="${first_error}" arg2="true" trim="true" />
		</condition>
		<fail if="${isStop}" message="당일 접수한 배포 건이 없습니다." /><!-- isStop 라면 fail 시켜라(???) -->
		
		<java jvm="${java.home.dir}/bin/java" fork="yes"
		      failonerror="false"
		      jar="${deployer.home.dir}/bin/deploy-deployer.jar"
			  errorproperty="error">
			<arg value="${ant.project.name}"/>
			<arg value="${rglr.dep.id}"/>
			<arg value="${deploy.phase}"/>
			<arg value="accept"/>
		</java>
		<condition property="isError">
			<length string="${error}" when="greater" length="0" /><!-- error 변수의 값이 string 에 들어간다는 소리인데 error 값은 어디서 갖고 오는지??? -->
		</condition>
		
		<condition property="isFirstError">
			<and>
				<istrue value="${isError}" />
				<equals arg1="0" arg2="${deploy_count}" trim="true" />
			</and>
		</condition>
		
		<propertyfile file="${lock.workspace}/${rglr.dep.id}_lock.properties">
			<entry key="deploy_count" default="0" type="int" operation="+" />
			<entry key="first_error" value="${isFirstError}" />
		</propertyfile>
		
		<fail if="${isError}" message="." />
		
		<record name="${ant.project.name}_param.properties" emacsmode="true" action="start" />
		<echo>DEPLOY_ID=${rglr.dep.id}</echo>
		<record name="${ant.project.name}_param.properties" emacsmode="true" action="stop" />
	</target>
	
	<target name="accept" depends="check_lock_prop">
		<antcall target="set_prop" />
		<antcall target="exec_app" />
	</target>	
			
	<!-- **************************************************************** -->	
	<!-- MERGE -->
	<!-- **************************************************************** -->
	<target name="merge" if="isValid">
		<java jvm="${java.home.dir}/bin/java" fork="true"
		      failonerror="true"
		      jar="${deployer.home.dir}/bin/deploy-deployer.jar">
			<arg value="${ant.project.name}"/>
			<arg value="${deploy.id}"/>
			<arg value="${deploy.phase}"/>
			<arg value="merge"/>
		</java> 
	</target>
	
	<!-- **************************************************************** -->
	<!-- BUILD -->
	<!-- **************************************************************** -->
	<target name="build" if="isValid">
		<property name="init.build.log" 
			     value="../logs/${ant.project.name}/${deploy.id}_BUILD.log" />
		<record name="${init.build.log}" action="start"/>
		<antcall target="compile" />
		<antcall target="jar" />
		<record name="${init.build.log}" action="stop"/>
	</target>
	
	<path id="classpath">
		<fileset dir="${java.home}/lib">
			<include name="*.jar" />
		</fileset>		
		<!-- E:/jenkins-smartpick/jobs/SPP2014WEB_CM_1_TEST_BUILD/workspace/spp2014/branches/REAL/spp-web-cm/spp-web-common-lib/LIB-INF/common-lib -->
		<fileset dir="${hdsnWrkSpPath}/${svnReposNm}/${hdsnBranchPath}/spp-web-cm/spp-web-common-lib/LIB-INF/common-lib">
			<include name="*.jar" />
		</fileset>	
	</path>
			
	<target name="compile">
		<delete includeemptydirs="true">
			<!-- E:/jenkins-smartpick/jobs/SPP2014WEB_CM_1_TEST_BUILD/workspace/spp2014/branches/REAL/spp-web-cm/spp-web-common-lib/classes/**/* -->
			<fileset dir="${hdsnWrkSpPath}/${svnReposNm}/${hdsnBranchPath}/spp-web-cm/spp-web-common-lib/classes" includes="**/*"/>
    	</delete>

		<!-- E:/jenkins-smartpick/jobs/SPP2014WEB_CM_1_TEST_BUILD/workspace/spp2014/branches/REAL/spp-web-cm/spp-web-common-lib/src/main/java -->
		<!-- E:/jenkins-smartpick/jobs/SPP2014WEB_CM_1_TEST_BUILD/workspace/spp2014/branches/REAL/spp-web-cm/spp-web-common-lib/classes -->
		<javac classpathref="classpath" 
			srcdir="${hdsnWrkSpPath}/${svnReposNm}/${hdsnBranchPath}/spp-web-cm/spp-web-common-lib/src/main/java"
			destdir="${hdsnWrkSpPath}/${svnReposNm}/${hdsnBranchPath}/spp-web-cm/spp-web-common-lib/classes"
			target="1.6"
			failonerror="on" debug="on"
			encoding="utf-8" 
			nowarn="on" 
			deprecation="on"
			includeantruntime="false" />
			
		<!-- Java 파일외 파일들을 복사하는것으로 보임 -->
		<!-- E:/jenkins-smartpick/jobs/SPP2014WEB_CM_1_TEST_BUILD/workspace/spp2014/branches/REAL/spp-web-cm/spp-web-common-lib/classes -->
		<copy todir="${hdsnWrkSpPath}/${svnReposNm}/${hdsnBranchPath}/spp-web-cm/spp-web-common-lib/classes" overwrite="true">
			<!-- E:/jenkins-smartpick/jobs/SPP2014WEB_CM_1_TEST_BUILD/workspace/spp2014/branches/REAL/spp-web-cm/spp-web-common-lib/src/main/java -->
			<fileset dir="${hdsnWrkSpPath}/${svnReposNm}/${hdsnBranchPath}/spp-web-cm/spp-web-common-lib/src/main/java">
				<exclude name="**/*.java" />
		    </fileset>
		</copy>
	</target>
	

	
	<target name="jar">
		<!-- E:/jenkins-smartpick/jobs/SPP2014WEB_CM_1_TEST_BUILD/workspace/spp2014/branches/REAL/spp-web-cm/spp-web-common-lib/jar -->
		<mkdir dir="${hdsnWrkSpPath}/${svnReposNm}/${hdsnBranchPath}/spp-web-cm/spp-web-common-lib/jar" />
		<delete includeemptydirs="true">
			<!-- E:/jenkins-smartpick/jobs/SPP2014WEB_CM_1_TEST_BUILD/workspace/spp2014/branches/REAL/spp-web-cm/spp-web-common-lib/jar -->
			<fileset dir="${hdsnWrkSpPath}/${svnReposNm}/${hdsnBranchPath}/spp-web-cm/spp-web-common-lib/jar" includes="**/*"/>
    	</delete>
		<!-- E:/jenkins-smartpick/jobs/SPP2014WEB_CM_1_TEST_BUILD/workspace/spp2014/branches/REAL/spp-web-cm/spp-web-common-lib/jar/spp-web-common-lib.jar -->
		<!-- E:/jenkins-smartpick/jobs/SPP2014WEB_CM_1_TEST_BUILD/workspace/spp2014/branches/REAL/spp-web-cm/spp-web-common-lib/classes -->
		<jar encoding="UTF-8" destfile="${hdsnWrkSpPath}/${svnReposNm}/${hdsnBranchPath}/spp-web-cm/spp-web-common-lib/jar/spp-web-common-lib.jar">
			<fileset dir="${hdsnWrkSpPath}/${svnReposNm}/${hdsnBranchPath}/spp-web-cm/spp-web-common-lib/classes" />
		</jar>
	</target>
		
	<!-- **************************************************************** -->
	<!-- PACK -->
	<!-- **************************************************************** -->
	<target name="pack" if="isValid">
		<!-- E:/jenkins-smartpick/jobs/SPP2014WEB_CM_1_TEST_BUILD/workspace/spp2014/pack/REAL -->
		<mkdir dir="${hdsnWrkSpPath}/${svnReposNm}/${hdsnPackPath}" />
		<java jvm="${java.home.dir}/bin/java" fork="true"
		      failonerror="true"
		      jar="${deployer.home.dir}/bin/deploy-deployer.jar">
			<arg value="${ant.project.name}"/>
			<arg value="${deploy.id}"/>
			<arg value="${deploy.phase}"/>
			<arg value="pack"/>
		</java>
		<antcall target="pack_jar" />
	</target>
	
	<target name="pack_jar" depends="check_jar" if="existJar">
		<!-- E:/jenkins-smartpick/jobs/SPP2014WEB_CM_1_TEST_BUILD/workspace/spp2014/pack/REAL/CM_20160503_1400/spp_bo/webapp/WEB-INF/lib -->
		<mkdir dir="${hdsnWrkSpPath}/${svnReposNm}/${hdsnPackPath}/${deploy.id}/spp_bo/webapp/WEB-INF/lib" />

		<antcall target="lib.pack" /><!-- 라이브러리 체크인데 타겟이 없음 -->
		<antcall target="cmm.pack" /><!-- class 압축한 jar 파일-->
	</target>
	
	
	<!-- 
			일반적으로 업로드된 Jar 파일 : 이부분은 JAVA 프로그램에서 Pack 할때 생성한다. 그리고 existLibJar 타겟이 없음. 없는 타겟인데 오류가 나지 않네?? 
			 existCmmLib Target 을 말하는것이 아닌지? 
	-->
	<target name="lib.pack" if="existLibJar">
			<!-- ######## 아래 폴더는 Config에 경로가 없단 말이야 ?????????????????????????????????????????????????? ######### -->
			<!-- JAVA 프로그램에서 Pack할때 배포해야할 소스가 있으면 아래 코드처럼 Pack이 되니까 아래 코드는 굳이 필요없지 않은가?? 
				srcLibPath = spp-web-cm/spp-web-common-lib/LIB-INF/common-lib 에서
				=================>
				svrLibPath = spp_bo/webapp/WEB-INF/lib
		-->

		<!-- E:/jenkins-smartpick/jobs/SPP2014WEB_CM_1_TEST_BUILD/workspace/spp2014/pack/REAL/CM_20160503_1400/spp_bo/webapp/WEB-INF/lib -->
		<copy todir="${hdsnWrkSpPath}/${svnReposNm}/${hdsnPackPath}/${deploy.id}/spp_bo/webapp/WEB-INF/lib" verbose="true" overwrite="true">
			<!-- E:/jenkins-smartpick/jobs/SPP2014WEB_CM_1_TEST_BUILD/workspace/spp2014/pack/REAL/CM_20160503_1400/spp_bo/spp-web-common-lib/LIB-INF/common-lib --><!-- 라이브러리 폴더 -->
			<fileset dir="${hdsnWrkSpPath}/${svnReposNm}/${hdsnPackPath}/${deploy.id}/spp_bo/spp-web-common-lib/LIB-INF/common-lib">
				<include name="*.jar"/>
		    </fileset>
		</copy>
	</target>
	
	<target name="cmm.pack" if="existCmmJar"><!-- 컴파일한 Jar 파일 -->
		<!-- E:/jenkins-smartpick/jobs/SPP2014WEB_CM_1_TEST_BUILD/workspace/spp2014/pack/REAL/CM_20160503_1400/ -->
		<copy todir="${hdsnWrkSpPath}/${svnReposNm}/${hdsnPackPath}/${deploy.id}/spp_bo/webapp/WEB-INF/lib" verbose="true" overwrite="true">
			<!-- E:/jenkins-smartpick/jobs/SPP2014WEB_CM_1_TEST_BUILD/workspace/spp2014/branches/REAL/spp-web-cm/spp-web-common-lib/jar -->
			<fileset dir="${hdsnWrkSpPath}/${svnReposNm}/${hdsnBranchPath}/spp-web-cm/spp-web-common-lib/jar">
				<include name="spp-web-common-lib.jar"/>
		    </fileset>			
		</copy>	
	</target>	
	
	<!-- **************************************************************** -->
	<!-- BACKUP -->
	<!-- **************************************************************** -->
	<target name="backup">
		<java jvm="${java.home.dir}/bin/java" fork="true"
		      failonerror="true"
		      jar="${deployer.home.dir}/bin/deploy-deployer.jar">
			<arg value="${ant.project.name}"/>
			<arg value="${deploy.id}"/>
			<arg value="${deploy.phase}"/>
			<arg value="deploy"/>
			<arg value="${was.ip}" />
			<arg value="21" />
			<arg value="${svrUserId}" />
			<arg value="${svrUserPassword}" />
		</java>
	</target>

	<!-- **************************************************************** -->
	<!-- DEPLOY -->
	<!-- **************************************************************** -->	
	<target name="deploy_bo">
		<ftp server="${was.ip}" userid="${svrUserId}" password="${svrUserPassword}"
		     remotedir="/lotte"
		     action="put"
			 passive="yes">
			<!-- E:/jenkins-smartpick/jobs/SPP2014WEB_CM_1_TEST_BUILD/workspace/spp2014/pack/REAL/CM_20160503_1400 -->
			<fileset dir="${hdsnWrkSpPath}/${svnReposNm}/${hdsnPackPath}/${deploy.id}">
				<include name="spp_bo/webapp/WEB-INF/lib/*"></include>
				<exclude name="spp_bo/webapp/WEB-INF/classes/**/*"></exclude>
			</fileset>
		</ftp>
	</target>
	
	<!-- **************************************************************** -->
	<!-- RECORD -->
	<!-- **************************************************************** -->	
	<target name="record" depends="set_params">
		<java jvm="${java.home.dir}/bin/java" fork="true"
		      failonerror="true"
		      jar="${deployer.home.dir}/bin/deploy-deployer.jar">
			<arg value="${ant.project.name}"/>
			<arg value="${deploy.id}"/>
			<arg value="${deploy.phase}"/>
			<arg value="record"/>
		</java> 
	</target>
	
	<!-- **************************************************************** -->
	<!-- NOTICE -->
	<!-- **************************************************************** -->	
	<target name="notice_fail" depends="set_params">
		<java jvm="${java.home.dir}/bin/java" fork="true"
		      failonerror="true"
		      jar="${deployer.home.dir}/bin/deploy-deployer.jar">
			<arg value="${ant.project.name}"/>
			<arg value="${deploy.id}"/>
			<arg value="${deploy.phase}"/>
			<arg value="notice"/>
			<arg value="FAIL"/>
		</java> 
	</target>
	
	<target name="notice_success" depends="set_params">
		<java jvm="${java.home.dir}/bin/java" fork="true"
		      failonerror="true"
		      jar="${deployer.home.dir}/bin/deploy-deployer.jar">
			<arg value="${ant.project.name}"/>
			<arg value="${deploy.id}"/>
			<arg value="${deploy.phase}"/>
			<arg value="notice"/>
			<arg value="SUCCESS"/>
		</java> 
	</target>	
		
	<!-- **************************************************************** -->
	<!-- ROLLBACK FOR TEST SERVER -->
	<!-- **************************************************************** -->		
	<target name="run_bo_rollback" depends="set_params">
		<echo>♠ SPP BO ROLLBACK ${deploy.id}</echo>
		<antcall target="rollback_bo" />
	</target>
	
	<target name="rollback_bo">
		<ftp server="${was.ip}" userid="${svrUserId}" password="${svrUserPassword}"
		     remotedir="/lotte"
		     action="put"
			 passive="yes">
			<fileset dir="${hdsnWrkSpPath}/${svnReposNm}/${hdsnPackPath}/${deploy.id}_backup">
				<include name="spp_bo/webapp/WEB-INF/lib/*"></include>
			</fileset>
		</ftp>
	</target>
</project>